[GoConvey](http://smartystreets.github.io/goconvey) is a new project that makes testing a pleasure in Go. It features a comprehensive framework for writing behavioral-style tests and a web UI which reports test results.

![GoConvey's web UI when all tests pass](http://smartystreets.github.io/goconvey/resources/images/ok.png)

The web interface works with any tests that run with `go test`. In other words, it fully supports native Go tests using the standard `testing` package, and it should play nicely with other frameworks like gocheck, Testify, and Ginkgo.

It updates automatically when .go files are changed and doesn’t get in your way: the design is responsive so you can squish the browser window next to your code. You may also enable desktop notifications if you want to keep your eyes in your editor:

![Desktop notifications](http://smartystreets.github.io/goconvey/resources/images/notif.png)

At its core, though, GoConvey is a testing framework. Its simple DSL is designed so that code is not only tested, but also documented clearly and unambiguously:

    func TestIntegerExample(t *testing.T) {
    	Convey("Subject: Integer incrementation and decrementation", t, func() {
    		var x int
    
    		Convey("Given a starting integer value", func() {
    			x = 42
    
    			Convey("When incremented", func() {
    				x++
    
    				Convey("The value should be greater by one", func() {
    					So(x, ShouldEqual, 43)
    				})
    				Convey("The value should NOT be what it used to be", func() {
    					So(x, ShouldNotEqual, 42)
    				})
    			})
    		})
    	})
    }

The web UI comes with a tool to stub this out for you without having to worry about Go syntax.

Or, you don’t have to use the web UI at all. Run tests in the terminal with `go test` as usual:

![GoConvey's terminal output](http://smartystreets.github.io/goconvey/resources/images/terminal.png)

A primary motivation for using GoConvey is to reverse the backward logic of the tests in the standard `testing` package. Reading and writing code like

	if foo < bar && baz != "abc" || bop == 0 {
		t.Error("Test failed...")
	}

is counter-intuitive. This tells us what the code *shouldn’t* do, rather than telling us what it *should* do. Sure, this example is contrived, but inferring intent from this kind of code is hard.

But other testing frameworks already provide *positive* assertions and are more lightweight. Why make another one? Other than being a good project with which to learn Go, we thought a web interface would be really slick. We just didn’t want to perform surgery on an existing framework.

If you're wondering whether you should use GoConvey, the answer is: it depends. It's definitely worth a try! GoConvey is more verbose, whereas Go convention is to be concise and even abbreviated. But Go purists may still find the web UI appealing while sticking to the standard testing package. (And let’s remind ourselves that the test files and packages are not compiled into the production binaries.) GoConvey sufficiently provides most testing conveniences, but real Go power-users with very specific needs may need a framework with even more features such as Ginkgo.

So what’s next for GoConvey? It already works well enough for our internal needs at SmartyStreets (which was our original intention). If you would like to contribute new things or fixes, please be our guest. Open an issue to discuss it, then remember: "a pull request, **with test**, is best."

- [Quick Start / Wiki](https://github.com/smartystreets/goconvey/wiki)
- [GoConvey on GitHub](https://github.com/smartystreets/goconvey)
- [GoConvey homepage](http://smartystreets.github.io/goconvey)
