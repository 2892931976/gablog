Go Advent Day 11 - Build a Christmas List with Martini
11 Dec 2013
Tags: goadvent

Jeremy Saenz
@codegangsta

* Introduction
[[http://github.com/codegangsta/martini][Martini]] is a Go package for web server development that has gained quite a bit of popularity over the last month. Martini was written to help make web development in Go a convenient, expressive, and DRY (pun intended) process. As of this writing Martini has *161* watchers, *2316* Stars, and *153* Forks on Github. There is a ton of weekly activity around both the [[http://github.com/codegangsta/martini][martini]] and [[http://github.com/codegangsta/martini-contrib][martini-contrib]] repositories.

If you haven't already be sure to check out the [[http://martini.codegangsta.io/#demo][Video Demo]].

* Hello world
Martini makes web development classy, just take a gander at the following code: 

.code day-11-martini/hello.go

The Martini API was obsessively designed to make HTTP servers easy to write and easy to read. A `martini.Classic()` contains a good set of base functionality like logging, error recovery, routing, and static file serving. If you do not need any of the base functionality it is just as easy to instantiate a blank canvas with `martini.New`.

Handling HTTP requests is extremely intuitive. A `Handler` in Martini is any callable function. If your function returns something, Martini will write it out to the http response body. In the same vein, a handler function can return a `(int, string)` and Martini will write out a response code as well as a body.

The return handling is fun, but most of Martini's power comes from Middleware and Services. Let's dive a little deeper and create our first real web app in Martini!

* A Go Advent Christmas List

In the spirit of Christmas, I decided that it would only be appropriate to create a Christmas Wish List web app in Martini. By the end of this tutorial we will have a functioning we app complete with *HTML*template*rendering*, *Form*parsing*, and *MongoDB*integration*. Oh yeah, did I mention this will be only *50*lines*of*code?*

** Rendering HTML Templates
Our Chrismas wish list only needs one endpoint, `/wishes`. When a browser visits the `/wishes` endpoint we should provide them with a list of wishes that already exists as well as a form to create a new wish.

To render out the HTML we will use an external package from martini-contrib called `render`.

.code day-11-martini/rendering.go
.code day-11-martini/list.tmpl

** Hooking up MongoDB
.code day-11-martini/final.go /START1 OMIT/,/END1 OMIT/
.code day-11-martini/final.go /START2 OMIT/,/END2 OMIT/
.code day-11-martini/final.go /START3 OMIT/,/END3 OMIT/

** Listing the Wishes
.code day-11-martini/final.go /START4 OMIT/,/END4 OMIT/

** Creating new Wishes
.code day-11-martini/final.go /START5 OMIT/,/END5 OMIT/

** 50 Lines of Go Later...
.code day-11-martini/final.go

* Community
Although Martini is young, the community surrounding it is vibrant. Here are some resources to help you get involved:

- [[http://martini.codegangsta.io][Martini Site]]
- [[https://github.com/codegangsta/martini][Github]]
- [[https://github.com/codegangsta/martini-contrib][Useful Martini Components]]
- [[https://groups.google.com/forum/#!forum/martini-go][Mailing List]]
- [[http://0value.com/build-a-restful-API-with-Martini][Build a RESTful API with Martini]]

* Go Build Stuff!
The Beauty of Martini is that it embraces the diversity of the web. Martini gives you the flexibility to build API's, render HTML, and serve rich content over HTTP. Make your Martini the way you like it!

2014 is going to be rad for the Go community. Let us together build some valuable web components for the Go ecosystem!
